<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.labshigh.realestate.internal.api.marketItem.mapper.MarketItemMapper">
  <insert id="insert" keyProperty="uid" parameterType="com.labshigh.realestate.internal.api.marketItem.dao.MarketItemDao" useGeneratedKeys="true">
    INSERT INTO realestate.market_item (item_uid, quantity, current_quantity, start_at, end_at, price, transaction_hash, first_market_item_uid)
    VALUES(#{itemUid}, #{quantity}, #{currentQuantity}, #{startAt}, #{endAt}, #{price} ,#{transactionHash}, #{firstMarketItemUid})
  </insert>


  <select id="countMarketItem" resultType="int">
    SELECT 	COUNT(*)
    FROM realestate.market_item AS mi
           LEFT OUTER JOIN realestate.item AS i ON mi.item_uid = i.uid AND i.deleted_flag = false AND i.used_flag = true
           LEFT OUTER JOIN realestate.`member` m ON i.member_uid = m.uid AND m.deleted_flag = false AND m.used_flag = true
           LEFT OUTER JOIN realestate.exchange usd ON usd.code = 'FRX.KRWUSD' AND usd.deleted_flag = false AND usd.used_flag = true
           LEFT OUTER JOIN common_code AS acc
                           ON i.allocation_uid = acc.uid AND acc.deleted_flag = false AND acc.used_flag = true
           LEFT OUTER JOIN common_code AS scc
                           ON i.status_uid  = scc.uid AND scc.deleted_flag = false AND scc.used_flag = true
    WHERE 	mi.deleted_flag = false AND
      mi.used_flag = true AND
      mi.minting_status = 1  AND
      mi.item_uid > 0
    <if test="request.allocationUid > 0">
      AND i.allocation_uid = #{request.allocationUid}
    </if>
    <if test="request.memberUid > 0">
      AND m.uid = #{request.memberUid}
    </if>
  </select>
  <select id="listMarketItem" resultType="com.labshigh.realestate.internal.api.marketItem.dao.MarketItemDetailDao">
    SELECT 	mi.uid,
            mi.created_at,
            mi.updated_at,
            mi.deleted_flag,
            mi.used_flag,
            mi.item_uid,
            mi.quantity,
            mi.current_quantity,
            mi.start_at,
            mi.end_at,
            mi.price,
            mi.price / usd.base_price AS usd_price,
            mi.price / usd.base_price / fog.price AS fog_price,
            mi.transaction_hash,
            mi.sell_id,
            mi.nft_id,
            mi.minting_status,
            i.member_uid ,
            i.allocation_uid ,
            acc.name AS allocation_name,
            i.status_uid ,
            scc.name AS status_name,
            i.image_uri ,
            i.project_name,
            i.total_price,
            i.total_price / usd.base_price AS usd_total_price,
            i.total_price / usd.base_price / fog.price AS fog_total_price,
            i.quantity,
            i.current_quantity,
            i.allocation_day,
            i.`right`,
            i.location,
            i.core_value,
            i.area,
            i.`scale`,
            i.purpose,
            i.company_name,
            i.approval_at,
            i.website_uri,
            i.detail,
            i.token_uri,
            m.wallet_address,
            (SELECT file_uri FROM  realestate.item_file where item_uid = mi.item_uid AND category_uid = 13 LIMIT 0 , 1) AS item_file_uri

    FROM realestate.market_item AS mi
           LEFT OUTER JOIN realestate.item AS i ON mi.item_uid = i.uid AND i.deleted_flag = false AND i.used_flag = true
           LEFT OUTER JOIN realestate.`member` m ON i.member_uid = m.uid AND m.deleted_flag = false AND m.used_flag = true
           LEFT OUTER JOIN realestate.exchange usd ON usd.code = 'FRX.KRWUSD' AND usd.deleted_flag = false AND usd.used_flag = true
           LEFT OUTER JOIN realestate.exchange_virtual2 fog on fog.name = 'FOGnet_USD' AND fog.deleted_flag = false AND fog.used_flag = true
           LEFT OUTER JOIN common_code AS acc
                           ON i.allocation_uid = acc.uid AND acc.deleted_flag = false AND acc.used_flag = true
           LEFT OUTER JOIN common_code AS scc
                           ON i.status_uid  = scc.uid AND scc.deleted_flag = false AND scc.used_flag = true
    WHERE 	mi.deleted_flag = false AND
      mi.used_flag = true AND
      mi.minting_status = 1 AND
      mi.item_uid > 0
      <if test="request.allocationUid > 0">
        AND i.allocation_uid = #{request.allocationUid}
      </if>
      <if test="request.memberUid > 0">
        AND m.uid = #{request.memberUid}
      </if>
    ORDER BY mi.uid DESC
    LIMIT #{request.offsetAndRowCount.offset}, #{request.offsetAndRowCount.rowCount}
  </select>
  <select id="detail" resultType="com.labshigh.realestate.internal.api.marketItem.dao.MarketItemDetailDao">
    SELECT 	mi.uid,
            mi.created_at,
            mi.updated_at,
            mi.deleted_flag,
            mi.used_flag,
            mi.item_uid,
            mi.quantity,
            mi.current_quantity,
            mi.start_at,
            mi.end_at,
            mi.price,
            mi.price / usd.base_price AS usd_price,
            mi.price  / usd.base_price/ fog.price AS fog_price,
            mi.transaction_hash,
            mi.sell_id,
            mi.nft_id,
            mi.minting_status,
            i.member_uid ,
            i.allocation_uid ,
            acc.name AS allocation_name,
            i.status_uid ,
            scc.name AS status_name,
            i.image_uri ,
            i.project_name,
            i.total_price,
            i.total_price / usd.base_price AS usd_total_price,
            i.total_price / usd.base_price / fog.price AS fog_total_price,
            i.quantity,
            i.current_quantity,
            i.allocation_day,
            i.`right`,
            i.location,
            i.core_value,
            i.area,
            i.`scale`,
            i.purpose,
            i.company_name,
            i.approval_at,
            i.website_uri,
            i.detail,
            i.token_uri,
            m.wallet_address
    FROM realestate.market_item AS mi
           LEFT OUTER JOIN realestate.item AS i ON mi.item_uid = i.uid AND i.deleted_flag = false AND i.used_flag = true
           LEFT OUTER JOIN realestate.`member` AS m ON i.member_uid = m.uid AND m.deleted_flag = false AND m.used_flag = true
           LEFT OUTER JOIN realestate.exchange AS usd ON usd.code = 'FRX.KRWUSD' AND usd.deleted_flag = false AND usd.used_flag = true
           LEFT OUTER JOIN realestate.exchange_virtual2 AS fog on fog.name = 'FOGnet_USD' AND fog.deleted_flag = false AND fog.used_flag = true
            LEFT OUTER JOIN common_code AS acc
                           ON i.allocation_uid = acc.uid AND acc.deleted_flag = false AND acc.used_flag = true
           LEFT OUTER JOIN common_code AS scc
                           ON i.status_uid  = scc.uid AND scc.deleted_flag = false AND scc.used_flag = true
    WHERE 	mi.deleted_flag = false AND
      mi.used_flag = true AND
      mi.minting_status = 1 AND
      mi.uid = #{uid}
  </select>

  <select id="listMarketItemResell" resultType="com.labshigh.realestate.internal.api.marketItem.dao.MarketItemResellDao">
    SELECT mi.uid,
           mi.created_at,
           mi.updated_at,
           mi.deleted_flag,
           mi.used_flag,
           mi.quantity,
           mi.current_quantity,
           mi.price,
           mi.price / usd.base_price AS usd_price,
           mi.price / usd.base_price / fog.price AS fog_price,
           mi.price * mi.current_quantity AS total_price ,
           (mi.price * mi.current_quantity) / usd.base_price AS usd_total_price,
           (mi.price * mi.current_quantity) / usd.base_price / fog.price AS fog_total_price,
           mi.transaction_hash,
           mi.sell_id,
           mi.nft_id,
           mi.minting_status,
           mi.first_market_item_uid,
           m.wallet_address,
           CONCAT('#', ib.`index`) AS index_name,
           i.image_uri,
           i.token_uri
    FROM market_item mi
           LEFT OUTER JOIN
         (
           SELECT mid2.market_item_uid ,MAX(mid2.item_buy_uid) AS item_buy_uid
           FROM market_item_detail mid2
           WHERE  mid2.deleted_flag = false AND
             mid2.used_flag = true AND
             mid2.sell_flag = false
           GROUP BY mid2.market_item_uid
         ) AS mid2 ON mi.uid = mid2.market_item_uid
           LEFT OUTER JOIN item_buy ib ON mid2.item_buy_uid = ib.uid AND ib.deleted_flag = false AND ib.used_flag = true
           LEFT OUTER JOIN item AS i ON ib.item_uid = i.uid AND i.deleted_flag = false AND i.used_flag = true
           LEFT OUTER JOIN `member` AS m ON i.member_uid = m.uid AND m.deleted_flag = false AND m.used_flag = true
           LEFT OUTER JOIN realestate.exchange usd ON usd.code = 'FRX.KRWUSD' AND usd.deleted_flag = false AND usd.used_flag = true
           LEFT OUTER JOIN realestate.exchange_virtual2 fog on fog.name = 'FOGnet_USD' AND fog.deleted_flag = false AND fog.used_flag = true

    WHERE mi.item_uid = 0 AND
      mi.deleted_flag = false AND
      mi.used_flag = true AND
      mi.current_quantity > 0 AND
      mi.minting_status = 1 AND
      mi.cancel_flag = false AND
      mi.first_market_item_uid = #{marketItemUid}
    ORDER BY mi.price, mi.uid DESC
  </select>

  <select id="listMarketItemMyResell" resultType="com.labshigh.realestate.internal.api.marketItem.dao.MarketItemResellDao">
    SELECT mi.uid,
           mi.created_at,
           mi.updated_at,
           mi.deleted_flag,
           mi.used_flag,
           mi.quantity,
           mi.current_quantity,
           mi.price,
           mi.price / usd.base_price AS usd_price,
           mi.price / usd.base_price / fog.price AS fog_price,
           mi.price * mi.current_quantity AS total_price ,
           (mi.price * mi.current_quantity) / usd.base_price AS usd_total_price,
           (mi.price * mi.current_quantity) / usd.base_price / fog.price AS fog_total_price,
           mi.transaction_hash,
           mi.sell_id,
           mi.nft_id,
           mi.minting_status,
           mi.first_market_item_uid,
           m.wallet_address,
           (
             SELECT GROUP_CONCAT(CONCAT('#', ib.`index`) order by ib.`index` )
             FROM market_item_detail mid2
                    LEFT OUTER JOIN item_buy ib ON mid2.item_buy_uid = ib.uid AND ib.deleted_flag = false AND ib.used_flag = true
             WHERE mid2.deleted_flag = false AND
               mid2.used_flag = true AND
               mid2.sell_flag = false AND
               mid2.market_item_uid = mi.uid
           ) AS index_name,
           i.image_uri,
           i.token_uri,
           oi.uid AS item_uid,
           oi.project_name
    FROM market_item mi
           LEFT OUTER JOIN
         (
           SELECT mid2.market_item_uid ,MAX(mid2.item_buy_uid) AS item_buy_uid
           FROM market_item_detail mid2
           WHERE  mid2.deleted_flag = false AND
             mid2.used_flag = true AND
             mid2.sell_flag = false
           GROUP BY mid2.market_item_uid
         ) AS mid2 ON mi.uid = mid2.market_item_uid
           LEFT OUTER JOIN item_buy ib ON mid2.item_buy_uid = ib.uid AND ib.deleted_flag = false AND ib.used_flag = true
           LEFT OUTER JOIN item AS i ON ib.item_uid = i.uid AND i.deleted_flag = false AND i.used_flag = true
           LEFT OUTER JOIN item AS oi ON oi.uid = i.original_item_uid AND oi.deleted_flag = false AND oi.used_flag = true
           LEFT OUTER JOIN `member` AS m ON i.member_uid = m.uid AND m.deleted_flag = false AND m.used_flag = true
           LEFT OUTER JOIN realestate.exchange usd ON usd.code = 'FRX.KRWUSD' AND usd.deleted_flag = false AND usd.used_flag = true
           LEFT OUTER JOIN realestate.exchange_virtual2 fog on fog.name = 'FOGnet_USD' AND fog.deleted_flag = false AND fog.used_flag = true
    WHERE mi.item_uid = 0 AND
      mi.deleted_flag = false AND
      mi.used_flag = true AND
      mi.current_quantity > 0 AND
      mi.minting_status = 1 AND
      mi.cancel_flag = false AND
      mi.first_market_item_uid = #{marketItemUid} AND
      i.member_uid = #{memberUid}
    ORDER BY mi.price, mi.uid DESC
  </select>

  <select id="countMarketItemMyResell" resultType="int">
    SELECT Count(*)
    FROM market_item mi
           LEFT OUTER JOIN
         (
           SELECT mid2.market_item_uid ,MAX(mid2.item_buy_uid) AS item_buy_uid
           FROM market_item_detail mid2
           WHERE  mid2.deleted_flag = false AND
             mid2.used_flag = true AND
             mid2.sell_flag = false
           GROUP BY mid2.market_item_uid
         ) AS mid2 ON mi.uid = mid2.market_item_uid
           LEFT OUTER JOIN item_buy ib ON mid2.item_buy_uid = ib.uid AND ib.deleted_flag = false AND ib.used_flag = true
           LEFT OUTER JOIN item AS i ON ib.item_uid = i.uid AND i.deleted_flag = false AND i.used_flag = true
           LEFT OUTER JOIN item AS oi ON oi.uid = i.original_item_uid AND oi.deleted_flag = false AND oi.used_flag = true
    WHERE mi.item_uid = 0 AND
      mi.deleted_flag = false AND
      mi.used_flag = true AND
      mi.current_quantity > 0 AND
      mi.minting_status = 1 AND
      mi.cancel_flag = false AND
      mid2.market_item_uid = #{marketItemUid} AND
      i.member_uid = #{memberUid}
  </select>

  <select id="listSellMember" resultType="com.labshigh.realestate.internal.api.marketItem.dao.SellMemberDao">
    SELECT 	DISTINCT
            m.wallet_address,
            m.uid AS member_uid
    FROM realestate.market_item AS mi
    LEFT OUTER JOIN realestate.item AS i ON mi.item_uid = i.uid AND i.deleted_flag = false AND i.used_flag = true
    LEFT OUTER JOIN realestate.`member` m ON i.member_uid = m.uid AND m.deleted_flag = false AND m.used_flag = true
    WHERE 	mi.deleted_flag = false AND
    mi.used_flag = true AND
    mi.minting_status = 1
  </select>

  <select id="listMarketItemHistory" resultType="com.labshigh.realestate.internal.api.marketItem.dao.MarketItemHistoryListDao">


    SELECT result.event, result.created_at, result.transaction_hash, result.price, result.`number`,
    result.from_wallet_address, result.to_wallet_address,
    result.usd_price, result.fog_price, result.total_price, result.usd_total_price,
    result.fog_total_price , result.quantity
    FROM
    (
        SELECT * FROM (
          SELECT rs.event, rs.created_at, rs.transaction_hash, rs.price, rs.`number`,
          rs.from_wallet_address, rs.to_wallet_address,
          rs.price / usd.base_price AS usd_price,
          rs.price / usd.base_price / fog.price AS fog_price,
          rs.price * rs.quantity AS total_price ,
          (rs.price * rs.quantity) / usd.base_price AS usd_total_price,
          (rs.price * rs.quantity) / usd.base_price / fog.price AS fog_total_price,
          rs.quantity
          FROM
          (
          /* 판매 정보 */
          SELECT 'List' AS event, mi.created_at, mi.transaction_hash, mi.price, CASE WHEN mi.quantity > 1
          THEN CONCAT('[', mi.quantity, ' EA]') ELSE CONCAT('#', ib.`index`) END AS `number` ,
          m.wallet_address AS from_wallet_address , '' AS to_wallet_address,mi.quantity
          FROM market_item mi LEFT OUTER JOIN
          (
          SELECT mid2.market_item_uid ,MAX(mid2.item_buy_uid) AS item_buy_uid
          FROM market_item_detail mid2
          WHERE mid2.deleted_flag = false AND mid2.used_flag = true
          GROUP BY mid2.market_item_uid
          ) AS mid2 ON mi.uid = mid2.market_item_uid
          LEFT OUTER JOIN item_buy ib ON mid2.item_buy_uid = ib.uid AND ib.deleted_flag = false AND
          ib.used_flag = true
          LEFT OUTER JOIN item AS i ON ib.item_uid = i.uid AND i.deleted_flag = false AND i.used_flag =
          true
          LEFT OUTER JOIN `member` AS m ON i.member_uid = m.uid AND m.deleted_flag = false AND m.used_flag
          = true

          WHERE (mi.first_market_item_uid = #{marketItemUid}) AND mi.minting_status = 1 AND
          mi.deleted_flag = false AND mi.used_flag = true

          UNION ALL

          /* 구매정보 */
          SELECT 'Sell' AS event, MAX(ib.created_at), ib.transaction_hash, MAX(ib.price) AS price, CASE
          WHEN COUNT(*) > 1 THEN CONCAT('[', COUNT(*) , ' EA]') ELSE CONCAT('#', MAX(ib.`index`) ) END AS
          `number`, CASE WHEN MAX(mi.item_uid) = 0 THEN MAX(m2.wallet_address) ELSE MAX(am.wallet_address)
          END AS from_wallet_address, MAX(m.wallet_address) AS to_wallet_address, COUNT(*) AS quantity
          FROM item_buy ib
          LEFT OUTER JOIN market_item mi ON ib.market_item_uid = mi.uid AND mi.deleted_flag = false AND
          mi.used_flag = true
          LEFT OUTER JOIN item i ON ib.item_uid = i.uid AND i.deleted_flag = false AND i.used_flag = true
          LEFT OUTER JOIN `member` m ON i.member_uid = m.uid AND m.deleted_flag = false AND m.used_flag =
          true
          LEFT OUTER JOIN item ai ON mi.item_uid = ai.uid AND ai.deleted_flag = false AND ai.used_flag =
          true
          LEFT OUTER JOIN `member` am ON ai.member_uid = am.uid AND am.deleted_flag = false AND
          am.used_flag = true
          LEFT OUTER JOIN
          (
          SELECT mid2.market_item_uid ,MAX(mid2.item_buy_uid) AS item_buy_uid
          FROM market_item_detail mid2
          WHERE mid2.deleted_flag = false AND mid2.used_flag = true AND mid2.sell_flag = true
          GROUP BY mid2.market_item_uid
          ) AS mid2 ON mi.uid = mid2.market_item_uid
          LEFT OUTER JOIN item_buy ib2 ON ib2.uid = mid2.item_buy_uid AND ib2.deleted_flag = false AND
          ib2.used_flag = true
          LEFT OUTER JOIN item i2 ON ib2.item_uid = i2.uid AND i2.deleted_flag = false AND i2.used_flag =
          true
          LEFT OUTER JOIN `member` m2 ON i2.member_uid = m2.uid AND m2.deleted_flag = false AND
          m2.used_flag = true
          WHERE (mi.uid = #{marketItemUid} OR mi.first_market_item_uid = #{marketItemUid}) AND
          mi.minting_status = 1 AND mi.deleted_flag = false AND mi.used_flag = true
          GROUP BY ib.transaction_hash

          UNION ALL

          /*취소정보*/
          SELECT 'Cancel' AS event, mi.updated_at, mi.cancel_transaction_hash, mi.price, CASE WHEN
          mi.quantity > 1 THEN CONCAT('[', mi.current_quantity , ' EA]') ELSE CONCAT('#', ib.`index`) END
          AS `number`, m.wallet_address AS from_wallet_address , '' AS to_wallet_address,
          mi.current_quantity AS quantity
          FROM market_item mi LEFT OUTER JOIN
          (
          SELECT mid2.market_item_uid ,MAX(mid2.item_buy_uid) AS item_buy_uid
          FROM market_item_detail mid2
          WHERE mid2.deleted_flag = false AND mid2.used_flag = true
          GROUP BY mid2.market_item_uid
          ) AS mid2 ON mi.uid = mid2.market_item_uid
          LEFT OUTER JOIN item_buy ib ON mid2.item_buy_uid = ib.uid AND ib.deleted_flag = false AND
          ib.used_flag = true
          LEFT OUTER JOIN item AS i ON ib.item_uid = i.uid AND i.deleted_flag = false AND i.used_flag =
          true
          LEFT OUTER JOIN `member` AS m ON i.member_uid = m.uid AND m.deleted_flag = false AND m.used_flag
          = true
          WHERE (mi.first_market_item_uid = #{marketItemUid}) AND mi.minting_status = 1 AND mi.cancel_flag
          = true AND mi.deleted_flag = false AND mi.used_flag = true
          ) AS rs
          LEFT OUTER JOIN exchange usd ON usd.code = 'FRX.KRWUSD' AND usd.deleted_flag = false AND
          usd.used_flag = true
          LEFT OUTER JOIN exchange_virtual2 fog on fog.name = 'FOGnet_USD' AND fog.deleted_flag = false
          AND fog.used_flag = true

        ) AS a
      UNION ALL

        /*민팅정보*/
        SELECT 'Minted' AS event, mi.created_at , mi.transaction_hash,'' AS price, CONCAT('~ ' , mi.quantity)  AS `number`, m.wallet_address AS from_wallet_address, '' AS to_wallet_address,
              '' AS usd_price ,
              '' AS fog_price,
              '' AS total_price,
              '' AS usd_total_price,
              '' AS fog_total_price,
              mi.quantity AS qunatity
        FROM market_item mi
               LEFT OUTER JOIN item AS i ON mi.item_uid = i.uid AND i.deleted_flag = false AND i.used_flag = true
               LEFT OUTER JOIN `member` AS m ON i.member_uid = m.uid AND m.deleted_flag = false AND m.used_flag = true
        WHERE mi.uid = #{marketItemUid} AND mi.minting_status = 1 AND mi.deleted_flag = false AND mi.used_flag = true
    ) result
    <choose>
      <when test="sort != null and sort.name() == 'lowPrice'">
        ORDER BY result.price , result.created_at DESC
      </when>
      <when test="sort != null and sort.name() == 'highPrice'">
        ORDER BY result.price DESC, result.created_at DESC
      </when>
      <when test="sort != null and sort.name() == 'recently'">
        ORDER BY result.created_at DESC
      </when>
      <when test="sort != null and sort.name() == 'oldest'">
        ORDER BY result.created_at
      </when>
      <otherwise>
        ORDER BY result.created_at DESC
      </otherwise>
    </choose>

    LIMIT #{offsetAndRowCount.offset}, #{offsetAndRowCount.rowCount}

  </select>

  <select id="countMarketItemHistory" resultType="int">
    SELECT SUM(cnt)
    FROM (SELECT cnt
          FROM (
                 /* 판매 정보 */
                 SELECT COUNT(*) AS cnt
                 FROM market_item mi
                        LEFT OUTER JOIN
                      (SELECT mid2.market_item_uid, MAX(mid2.item_buy_uid) AS item_buy_uid
                       FROM market_item_detail mid2
                       WHERE mid2.deleted_flag = false
                         AND mid2.used_flag = true
                       GROUP BY mid2.market_item_uid) AS mid2 ON mi.uid = mid2.market_item_uid
                        LEFT OUTER JOIN item_buy ib ON mid2.item_buy_uid = ib.uid AND
                                                       ib.deleted_flag = false AND
                                                       ib.used_flag = true
                        LEFT OUTER JOIN item AS i
                                        ON ib.item_uid = i.uid AND i.deleted_flag = false AND
                                           i.used_flag = true
                        LEFT OUTER JOIN `member` AS m
                                        ON i.member_uid = m.uid AND m.deleted_flag = false AND
                                           m.used_flag = true

                 WHERE (mi.first_market_item_uid = #{marketItemUid})
                   AND mi.minting_status = 1
                   AND mi.deleted_flag = false
                   AND mi.used_flag = true

                 UNION ALL

                 /* 구매정보 */
                 SELECT COUNT(*)
                 FROM (SELECT ib.transaction_hash
                       FROM item_buy ib
                              LEFT OUTER JOIN market_item mi ON ib.market_item_uid = mi.uid AND
                                                                mi.deleted_flag = false AND
                                                                mi.used_flag = true
                              LEFT OUTER JOIN item i ON ib.item_uid = i.uid AND
                                                        i.deleted_flag = false AND
                                                        i.used_flag = true
                              LEFT OUTER JOIN `member` m ON i.member_uid = m.uid AND
                                                            m.deleted_flag = false AND
                                                            m.used_flag = true
                              LEFT OUTER JOIN item ai ON mi.item_uid = ai.uid AND
                                                         ai.deleted_flag = false AND
                                                         ai.used_flag = true
                              LEFT OUTER JOIN `member` am ON ai.member_uid = am.uid AND
                                                             am.deleted_flag = false AND
                                                             am.used_flag = true
                              LEFT OUTER JOIN
                            (SELECT mid2.market_item_uid, MAX(mid2.item_buy_uid) AS item_buy_uid
                             FROM market_item_detail mid2
                             WHERE mid2.deleted_flag = false
                               AND mid2.used_flag = true
                               AND mid2.sell_flag = true
                             GROUP BY mid2.market_item_uid) AS mid2
                            ON mi.uid = mid2.market_item_uid
                              LEFT OUTER JOIN item_buy ib2 ON ib2.uid = mid2.item_buy_uid AND
                                                              ib2.deleted_flag = false AND
                                                              ib2.used_flag = true
                              LEFT OUTER JOIN item i2 ON ib2.item_uid = i2.uid AND
                                                         i2.deleted_flag = false AND
                                                         i2.used_flag = true
                              LEFT OUTER JOIN `member` m2 ON i2.member_uid = m2.uid AND
                                                             m2.deleted_flag = false AND
                                                             m2.used_flag = true
                       WHERE (mi.uid = #{marketItemUid} OR
                              mi.first_market_item_uid = #{marketItemUid})
                         AND mi.minting_status = 1
                         AND mi.deleted_flag = false
                         AND mi.used_flag = true
                       GROUP BY ib.transaction_hash) buy
                 UNION ALL
                 /*취소정보*/
                 SELECT COUNT(*) AS cnt
                 FROM market_item mi
                        LEFT OUTER JOIN
                      (SELECT mid2.market_item_uid, MAX(mid2.item_buy_uid) AS item_buy_uid
                       FROM market_item_detail mid2
                       WHERE mid2.deleted_flag = false
                         AND mid2.used_flag = true
                       GROUP BY mid2.market_item_uid) AS mid2 ON mi.uid = mid2.market_item_uid
                        LEFT OUTER JOIN item_buy ib ON mid2.item_buy_uid = ib.uid AND
                                                       ib.deleted_flag = false AND
                                                       ib.used_flag = true
                        LEFT OUTER JOIN item AS i
                                        ON ib.item_uid = i.uid AND i.deleted_flag = false AND
                                           i.used_flag = true
                        LEFT OUTER JOIN `member` AS m
                                        ON i.member_uid = m.uid AND m.deleted_flag = false AND
                                           m.used_flag = true
                 WHERE (mi.first_market_item_uid = #{marketItemUid})
                   AND mi.minting_status = 1
                   AND mi.cancel_flag = true
                   AND mi.deleted_flag = false
                   AND mi.used_flag = true) AS rs
                 LEFT OUTER JOIN exchange usd
                                 ON usd.code = 'FRX.KRWUSD' AND usd.deleted_flag = false AND
                                    usd.used_flag = true
                 LEFT OUTER JOIN exchange_virtual2 fog
                                 on fog.name = 'FOGnet_USD' AND fog.deleted_flag = false AND
                                    fog.used_flag = true

          UNION ALL

          /*민팅정보*/
          SELECT COUNT(*) AS cnt
          FROM market_item mi
                 LEFT OUTER JOIN item AS i ON mi.item_uid = i.uid AND i.deleted_flag = false AND
                                              i.used_flag = true
                 LEFT OUTER JOIN `member` AS m
                                 ON i.member_uid = m.uid AND m.deleted_flag = false AND
                                    m.used_flag = true
          WHERE mi.uid = #{marketItemUid}
            AND mi.minting_status = 1
            AND mi.deleted_flag = false
            AND mi.used_flag = true) result

  </select>








  <update id="updateCurrentQuantity">
    UPDATE realestate.market_item
    SET current_quantity = current_quantity - #{currentQuantity}
    WHERE uid = #{uid}
  </update>

  <update id="updateCancelMarketItem">
    UPDATE realestate.market_item
    SET cancel_flag = true , cancel_transaction_hash = #{cancelTransactionHash}
    WHERE uid = #{uid}
  </update>



  <update id="deleteItemBuy">
    UPDATE  realestate.item_buy
    SET     deleted_flag = true
    WHERE   deleted_flag = false AND
            market_item_uid = #{uid}
  </update>

  <update id="deleteItemFile">
    UPDATE  realestate.item_file
    SET     deleted_flag = true
    WHERE   deleted_flag = false AND
            item_uid = #{itemUid}
  </update>

  <update id="deleteMarketItem">
    UPDATE  realestate.market_item
    SET     deleted_flag = true
    WHERE   deleted_flag = false AND
      uid = #{uid}
  </update>

  <update id="deleteItem">
    UPDATE  realestate.item
    SET     deleted_flag = true
    WHERE   deleted_flag = false AND
      uid = #{itemUid}
  </update>

</mapper>
